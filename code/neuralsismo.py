# -*- coding: utf-8 -*-
"""NeuralSismo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yVhQZJfpxD3lweSn_Wh_gDvUnUgXASQN
"""

!pip install segyio

import segyio
from matplotlib import pyplot as plt
import numpy as np

"""### Load data
Using [segyio](https://github.com/equinor/segyio) we can load the segy cubes as numpy arrays.
"""

filename_pp = "/content/issap20_Pp.sgy"
filename_ai = "/content/issap20_AI.sgy"
filename_fault = "/content/issap20_Fault.sgy"

# Load slb synthetics
path_slb_isFault = "D:\Fault identification\Schlumberger synthetic models\Schlumberger_800_SLB_Force_Fault_Model_IsFault.segy"

# Note: the the xline header info location is at segyio.su.cdpx [181]
def segy2numpy(filename: str) -> np.array:
    with segyio.open(filename, xline=181) as segyfile:
        return segyio.tools.cube(segyfile)

seismic = segy2numpy(filename_pp)
ai = segy2numpy(filename_ai)
fault = segy2numpy(filename_fault)

print(type(seismic))
print(fault.shape)
print(np.unique(fault))

f"Number of inlines: {seismic.shape[0]}, crosslines: {seismic.shape[1]}, samples: {seismic.shape[2]}"

def plot(synth, ai, fault, line_type, line_num):

    ILINE = line_num
    XLINE = line_num

    plt.figure(figsize=(10, 10))
    title = ['Synthetic_Seismic', 'AI']
    cmaps = ["seismic", None]

    print('\nPlotting ', line_type.upper(), ILINE)

    for i, cube in enumerate([synth, ai]):
        plt.subplot(1, 2, i+1)
        plt.title(title[i])

        if line_type == 'inline':

            plt.imshow(cube[ILINE,:, :].T, cmap=cmaps[i])
            plt.imshow(fault[ILINE,:, :].T, cmap='Greys',  vmin=0, vmax=1, alpha=0.3)
            plt.axis()
        elif line_type == 'xline':

            plt.imshow(cube[:,XLINE, :].T, cmap=cmaps[i])
            plt.imshow(fault[:,XLINE, :].T, cmap='Greys',  vmin=0, vmax=1, alpha=0.3)
            plt.axis()
    plt.show()

plot(seismic, ai, fault, line_type='inline', line_num=10)

plot(seismic, ai, fault, line_type='xline', line_num=100)

import ipywidgets as widgets

plot_output = widgets.Output()

plot_button = widgets.Button(
    description = 'Show images',
    disabled=False,
    button_style = '',
    tooltip = 'click to plot image.')

def on_button_clicked(b):
    plot_output.clear_output()
    with plot_output:
        plot(seismic, ai, fault, line_type='xline', line_num=50)

plot_button.on_click(on_button_clicked)


display(plot_button)
display(plot_output)

# plot inline
ILINE=20
plt.figure(figsize=(10, 10))
title = ['seismic', 'AI']
cmaps = ["seismic", None]

for i, cube in enumerate([seismic, ai]):
    plt.subplot(1, 2, i+1)
    plt.title(title[i])
    plt.imshow(cube[ILINE,:, :].T, cmap=cmaps[i])
    plt.imshow(fault[ILINE,:, :].T, cmap='Greys',  vmin=0, vmax=1, alpha=0.3)
    plt.axis()
plt.show()

# plot crossline
XLINE=50
plt.figure(figsize=(10, 10))
title = ['seismic', 'AI']
cmaps = ["seismic", None]

for i, cube in enumerate([seismic, ai]):
    plt.subplot(1, 2, i+1)
    plt.title(title[i])
    plt.imshow(cube[:,XLINE, :].T, cmap=cmaps[i])
    plt.imshow(fault[:,XLINE, :].T, cmap='Greys',  vmin=0, vmax=1, alpha=0.3)
    plt.axis()
plt.show()

# plot crossline
DEPTH=700
plt.figure(figsize=(10, 5))
title = ['seismic', 'AI']
cmaps = ["seismic", None]

for i, cube in enumerate([seismic, ai]):
    plt.subplot(1, 2, i+1)
    plt.title(title[i])
    plt.imshow(cube[:,:, DEPTH].T, cmap=cmaps[i])
    plt.imshow(fault[:,:, DEPTH].T, cmap='Greys',  vmin=0, vmax=1, alpha=0.3)
    plt.axis()
plt.show()

# Load slb synthetics
path_slb_isFault = "D:\Fault identification\Schlumberger synthetic models\Schlumberger_800_SLB_Force_Fault_Model_IsFault.segy"

fault_slb = segy2numpy(path_slb_isFault)

fault_slb.shape
df=fault_slb[0]
df

f = plt.figure()
f.set_figwidth(100)
f.set_figheight(60)
c=plt.imshow(df, cmap ='Greens',  interpolation ='nearest', origin ='lower')
plt.show()